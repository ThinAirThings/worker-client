{"version":3,"sources":["../src/index.ts","../src/WorkerClient.ts"],"sourcesContent":["export * from './WorkerClient'","import { rxToTx } from '@thinairthings/txrx'\nimport {nanoid} from 'nanoid'\n\ntype WorkerActionCallback = (payload: any, reply: (payload: Record<string, any>)=>void)=>void\nexport class WorkerClient {\n    actionTable: Record<string, (rxPayload: any)=>void> = {}\n    constructor(public worker: Worker | MessagePort, actions: Record<string, WorkerActionCallback>){\n        this.addActions(actions)\n        this.worker.onmessage = (event: MessageEvent<{action: string, messageId?:string, payload: any}>) => {\n            const {action, messageId, payload} = event.data\n            if (this.actionTable[action]){\n                this.actionTable[action]({messageId, ...payload})\n            } \n        } \n    }\n    addActions = (actions: Record<string, WorkerActionCallback>) => {\n        for (const [action, callback] of Object.entries(actions)){\n            this.actionTable[rxToTx(action)]= (rxPayload: {messageId: string}) => {\n                const reply = (txPayload: Record<string, any>) => {\n                    // Return message\n                    this.worker.postMessage( {\n                        action: rxPayload.messageId,\n                        payload: {messageId: rxPayload.messageId, ...txPayload}\n                    })\n                }\n                callback(rxPayload, reply)\n            }\n        }\n    }\n    sendMessage = async (action: string, payload?: Record<string, any>, transfer?: any) => {\n        this.worker.postMessage({action, payload}, transfer)\n    }\n    fetch = async (\n        action: string,\n        txPayload?: Record<string, any>,\n    ): Promise<Record<string, unknown>> => {\n        // YOU LEFT OFF HERE\n        const messageId = nanoid()\n        return new Promise((resolve, reject) => {\n            this.actionTable[messageId] = (rxPayload: {messageId: string, payload: Record<string, unknown>}) => {\n                resolve(rxPayload)\n            }\n            this.worker.postMessage({\n                action,\n                messageId,\n                payload: txPayload\n            })\n        })\n\n    }\n    cleanup = () => {\n        if (this.worker instanceof Worker) {\n            this.worker.terminate()\n            return\n        }\n        if (this.worker instanceof MessagePort) {\n            this.worker.close()\n            return\n        }\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,kBAAuB;AACvB,oBAAqB;AAGd,IAAM,eAAN,MAAmB;AAAA,EAEtB,YAAmB,QAA8B,SAA8C;AAA5E;AACf,SAAK,WAAW,OAAO;AACvB,SAAK,OAAO,YAAY,CAAC,UAA2E;AAChG,YAAM,EAAC,QAAQ,WAAW,QAAO,IAAI,MAAM;AAC3C,UAAI,KAAK,YAAY,MAAM,GAAE;AACzB,aAAK,YAAY,MAAM,EAAE,EAAC,WAAW,GAAG,QAAO,CAAC;AAAA,MACpD;AAAA,IACJ;AAAA,EACJ;AAAA,EATA,cAAsD,CAAC;AAAA,EAUvD,aAAa,CAAC,YAAkD;AAC5D,eAAW,CAAC,QAAQ,QAAQ,KAAK,OAAO,QAAQ,OAAO,GAAE;AACrD,WAAK,gBAAY,oBAAO,MAAM,CAAC,IAAG,CAAC,cAAmC;AAClE,cAAM,QAAQ,CAAC,cAAmC;AAE9C,eAAK,OAAO,YAAa;AAAA,YACrB,QAAQ,UAAU;AAAA,YAClB,SAAS,EAAC,WAAW,UAAU,WAAW,GAAG,UAAS;AAAA,UAC1D,CAAC;AAAA,QACL;AACA,iBAAS,WAAW,KAAK;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,cAAc,OAAO,QAAgB,SAA+B,aAAmB;AACnF,SAAK,OAAO,YAAY,EAAC,QAAQ,QAAO,GAAG,QAAQ;AAAA,EACvD;AAAA,EACA,QAAQ,OACJ,QACA,cACmC;AAEnC,UAAM,gBAAY,sBAAO;AACzB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,WAAK,YAAY,SAAS,IAAI,CAAC,cAAqE;AAChG,gBAAQ,SAAS;AAAA,MACrB;AACA,WAAK,OAAO,YAAY;AAAA,QACpB;AAAA,QACA;AAAA,QACA,SAAS;AAAA,MACb,CAAC;AAAA,IACL,CAAC;AAAA,EAEL;AAAA,EACA,UAAU,MAAM;AACZ,QAAI,KAAK,kBAAkB,QAAQ;AAC/B,WAAK,OAAO,UAAU;AACtB;AAAA,IACJ;AACA,QAAI,KAAK,kBAAkB,aAAa;AACpC,WAAK,OAAO,MAAM;AAClB;AAAA,IACJ;AAAA,EACJ;AACJ;","names":[]}